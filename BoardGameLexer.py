# Generated from BoardGameLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,75,546,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
        1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,
        1,48,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,53,1,53,
        1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,
        1,66,1,66,1,67,4,67,473,8,67,11,67,12,67,474,1,68,4,68,478,8,68,
        11,68,12,68,479,1,68,1,68,4,68,484,8,68,11,68,12,68,485,1,69,1,69,
        5,69,490,8,69,10,69,12,69,493,9,69,1,69,1,69,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,3,70,506,8,70,1,71,1,71,5,71,510,8,71,10,
        71,12,71,513,9,71,1,72,1,72,1,72,1,72,5,72,519,8,72,10,72,12,72,
        522,9,72,1,72,1,72,1,73,4,73,527,8,73,11,73,12,73,528,1,73,1,73,
        1,74,4,74,534,8,74,11,74,12,74,535,1,74,1,74,5,74,540,8,74,10,74,
        12,74,543,9,74,1,74,1,74,0,0,75,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,
        141,71,143,72,145,73,147,74,149,75,1,0,7,1,0,48,57,1,0,34,34,2,0,
        65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,
        10,13,13,32,32,3,0,65,90,95,95,97,122,555,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,
        0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,
        0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,
        1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,
        0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,
        0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,
        141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,
        0,0,1,151,1,0,0,0,3,156,1,0,0,0,5,163,1,0,0,0,7,169,1,0,0,0,9,177,
        1,0,0,0,11,188,1,0,0,0,13,194,1,0,0,0,15,200,1,0,0,0,17,205,1,0,
        0,0,19,211,1,0,0,0,21,218,1,0,0,0,23,228,1,0,0,0,25,237,1,0,0,0,
        27,244,1,0,0,0,29,250,1,0,0,0,31,253,1,0,0,0,33,259,1,0,0,0,35,269,
        1,0,0,0,37,274,1,0,0,0,39,280,1,0,0,0,41,286,1,0,0,0,43,293,1,0,
        0,0,45,299,1,0,0,0,47,308,1,0,0,0,49,316,1,0,0,0,51,322,1,0,0,0,
        53,326,1,0,0,0,55,331,1,0,0,0,57,334,1,0,0,0,59,339,1,0,0,0,61,343,
        1,0,0,0,63,350,1,0,0,0,65,354,1,0,0,0,67,358,1,0,0,0,69,363,1,0,
        0,0,71,366,1,0,0,0,73,371,1,0,0,0,75,375,1,0,0,0,77,381,1,0,0,0,
        79,387,1,0,0,0,81,393,1,0,0,0,83,400,1,0,0,0,85,403,1,0,0,0,87,409,
        1,0,0,0,89,415,1,0,0,0,91,419,1,0,0,0,93,422,1,0,0,0,95,426,1,0,
        0,0,97,429,1,0,0,0,99,431,1,0,0,0,101,433,1,0,0,0,103,436,1,0,0,
        0,105,438,1,0,0,0,107,441,1,0,0,0,109,443,1,0,0,0,111,445,1,0,0,
        0,113,447,1,0,0,0,115,449,1,0,0,0,117,451,1,0,0,0,119,453,1,0,0,
        0,121,455,1,0,0,0,123,457,1,0,0,0,125,459,1,0,0,0,127,461,1,0,0,
        0,129,463,1,0,0,0,131,465,1,0,0,0,133,467,1,0,0,0,135,472,1,0,0,
        0,137,477,1,0,0,0,139,487,1,0,0,0,141,505,1,0,0,0,143,507,1,0,0,
        0,145,514,1,0,0,0,147,526,1,0,0,0,149,533,1,0,0,0,151,152,5,71,0,
        0,152,153,5,65,0,0,153,154,5,77,0,0,154,155,5,69,0,0,155,2,1,0,0,
        0,156,157,5,68,0,0,157,158,5,69,0,0,158,159,5,70,0,0,159,160,5,73,
        0,0,160,161,5,78,0,0,161,162,5,69,0,0,162,4,1,0,0,0,163,164,5,66,
        0,0,164,165,5,79,0,0,165,166,5,65,0,0,166,167,5,82,0,0,167,168,5,
        68,0,0,168,6,1,0,0,0,169,170,5,80,0,0,170,171,5,76,0,0,171,172,5,
        65,0,0,172,173,5,89,0,0,173,174,5,69,0,0,174,175,5,82,0,0,175,176,
        5,83,0,0,176,8,1,0,0,0,177,178,5,67,0,0,178,179,5,79,0,0,179,180,
        5,78,0,0,180,181,5,68,0,0,181,182,5,73,0,0,182,183,5,84,0,0,183,
        184,5,73,0,0,184,185,5,79,0,0,185,186,5,78,0,0,186,187,5,83,0,0,
        187,10,1,0,0,0,188,189,5,84,0,0,189,190,5,73,0,0,190,191,5,77,0,
        0,191,192,5,69,0,0,192,193,5,82,0,0,193,12,1,0,0,0,194,195,5,83,
        0,0,195,196,5,67,0,0,196,197,5,79,0,0,197,198,5,82,0,0,198,199,5,
        69,0,0,199,14,1,0,0,0,200,201,5,68,0,0,201,202,5,73,0,0,202,203,
        5,67,0,0,203,204,5,69,0,0,204,16,1,0,0,0,205,206,5,82,0,0,206,207,
        5,85,0,0,207,208,5,76,0,0,208,209,5,69,0,0,209,210,5,83,0,0,210,
        18,1,0,0,0,211,212,5,80,0,0,212,213,5,73,0,0,213,214,5,69,0,0,214,
        215,5,67,0,0,215,216,5,69,0,0,216,217,5,83,0,0,217,20,1,0,0,0,218,
        219,5,79,0,0,219,220,5,66,0,0,220,221,5,83,0,0,221,222,5,84,0,0,
        222,223,5,65,0,0,223,224,5,67,0,0,224,225,5,76,0,0,225,226,5,69,
        0,0,226,227,5,83,0,0,227,22,1,0,0,0,228,229,5,66,0,0,229,230,5,79,
        0,0,230,231,5,79,0,0,231,232,5,83,0,0,232,233,5,84,0,0,233,234,5,
        69,0,0,234,235,5,82,0,0,235,236,5,83,0,0,236,24,1,0,0,0,237,238,
        5,80,0,0,238,239,5,76,0,0,239,240,5,65,0,0,240,241,5,89,0,0,241,
        242,5,69,0,0,242,243,5,82,0,0,243,26,1,0,0,0,244,245,5,67,0,0,245,
        246,5,79,0,0,246,247,5,76,0,0,247,248,5,79,0,0,248,249,5,82,0,0,
        249,28,1,0,0,0,250,251,5,65,0,0,251,252,5,84,0,0,252,30,1,0,0,0,
        253,254,5,79,0,0,254,255,5,82,0,0,255,256,5,68,0,0,256,257,5,69,
        0,0,257,258,5,82,0,0,258,32,1,0,0,0,259,260,5,67,0,0,260,261,5,79,
        0,0,261,262,5,78,0,0,262,263,5,68,0,0,263,264,5,73,0,0,264,265,5,
        84,0,0,265,266,5,73,0,0,266,267,5,79,0,0,267,268,5,78,0,0,268,34,
        1,0,0,0,269,270,5,82,0,0,270,271,5,85,0,0,271,272,5,76,0,0,272,273,
        5,69,0,0,273,36,1,0,0,0,274,275,5,80,0,0,275,276,5,73,0,0,276,277,
        5,69,0,0,277,278,5,67,0,0,278,279,5,69,0,0,279,38,1,0,0,0,280,281,
        5,67,0,0,281,282,5,79,0,0,282,283,5,85,0,0,283,284,5,78,0,0,284,
        285,5,84,0,0,285,40,1,0,0,0,286,287,5,65,0,0,287,288,5,67,0,0,288,
        289,5,84,0,0,289,290,5,73,0,0,290,291,5,79,0,0,291,292,5,78,0,0,
        292,42,1,0,0,0,293,294,5,83,0,0,294,295,5,69,0,0,295,296,5,84,0,
        0,296,297,5,85,0,0,297,298,5,80,0,0,298,44,1,0,0,0,299,300,5,79,
        0,0,300,301,5,66,0,0,301,302,5,83,0,0,302,303,5,84,0,0,303,304,5,
        65,0,0,304,305,5,67,0,0,305,306,5,76,0,0,306,307,5,69,0,0,307,46,
        1,0,0,0,308,309,5,66,0,0,309,310,5,79,0,0,310,311,5,79,0,0,311,312,
        5,83,0,0,312,313,5,84,0,0,313,314,5,69,0,0,314,315,5,82,0,0,315,
        48,1,0,0,0,316,317,5,83,0,0,317,318,5,84,0,0,318,319,5,65,0,0,319,
        320,5,82,0,0,320,321,5,84,0,0,321,50,1,0,0,0,322,323,5,69,0,0,323,
        324,5,78,0,0,324,325,5,68,0,0,325,52,1,0,0,0,326,327,5,77,0,0,327,
        328,5,79,0,0,328,329,5,86,0,0,329,330,5,69,0,0,330,54,1,0,0,0,331,
        332,5,84,0,0,332,333,5,79,0,0,333,56,1,0,0,0,334,335,5,84,0,0,335,
        336,5,85,0,0,336,337,5,82,0,0,337,338,5,78,0,0,338,58,1,0,0,0,339,
        340,5,82,0,0,340,341,5,79,0,0,341,342,5,87,0,0,342,60,1,0,0,0,343,
        344,5,67,0,0,344,345,5,79,0,0,345,346,5,76,0,0,346,347,5,85,0,0,
        347,348,5,77,0,0,348,349,5,78,0,0,349,62,1,0,0,0,350,351,5,65,0,
        0,351,352,5,76,0,0,352,353,5,76,0,0,353,64,1,0,0,0,354,355,5,65,
        0,0,355,356,5,78,0,0,356,357,5,89,0,0,357,66,1,0,0,0,358,359,5,78,
        0,0,359,360,5,79,0,0,360,361,5,78,0,0,361,362,5,69,0,0,362,68,1,
        0,0,0,363,364,5,73,0,0,364,365,5,70,0,0,365,70,1,0,0,0,366,367,5,
        69,0,0,367,368,5,76,0,0,368,369,5,83,0,0,369,370,5,69,0,0,370,72,
        1,0,0,0,371,372,5,70,0,0,372,373,5,79,0,0,373,374,5,82,0,0,374,74,
        1,0,0,0,375,376,5,87,0,0,376,377,5,72,0,0,377,378,5,73,0,0,378,379,
        5,76,0,0,379,380,5,69,0,0,380,76,1,0,0,0,381,382,5,73,0,0,382,383,
        5,78,0,0,383,384,5,80,0,0,384,385,5,85,0,0,385,386,5,84,0,0,386,
        78,1,0,0,0,387,388,5,80,0,0,388,389,5,82,0,0,389,390,5,73,0,0,390,
        391,5,78,0,0,391,392,5,84,0,0,392,80,1,0,0,0,393,394,5,82,0,0,394,
        395,5,69,0,0,395,396,5,84,0,0,396,397,5,85,0,0,397,398,5,82,0,0,
        398,399,5,78,0,0,399,82,1,0,0,0,400,401,5,73,0,0,401,402,5,78,0,
        0,402,84,1,0,0,0,403,404,5,66,0,0,404,405,5,82,0,0,405,406,5,69,
        0,0,406,407,5,65,0,0,407,408,5,75,0,0,408,86,1,0,0,0,409,410,5,69,
        0,0,410,411,5,82,0,0,411,412,5,82,0,0,412,413,5,79,0,0,413,414,5,
        82,0,0,414,88,1,0,0,0,415,416,5,65,0,0,416,417,5,78,0,0,417,418,
        5,68,0,0,418,90,1,0,0,0,419,420,5,79,0,0,420,421,5,82,0,0,421,92,
        1,0,0,0,422,423,5,78,0,0,423,424,5,79,0,0,424,425,5,84,0,0,425,94,
        1,0,0,0,426,427,5,61,0,0,427,428,5,61,0,0,428,96,1,0,0,0,429,430,
        5,61,0,0,430,98,1,0,0,0,431,432,5,60,0,0,432,100,1,0,0,0,433,434,
        5,60,0,0,434,435,5,61,0,0,435,102,1,0,0,0,436,437,5,62,0,0,437,104,
        1,0,0,0,438,439,5,62,0,0,439,440,5,61,0,0,440,106,1,0,0,0,441,442,
        5,43,0,0,442,108,1,0,0,0,443,444,5,45,0,0,444,110,1,0,0,0,445,446,
        5,42,0,0,446,112,1,0,0,0,447,448,5,47,0,0,448,114,1,0,0,0,449,450,
        5,58,0,0,450,116,1,0,0,0,451,452,5,46,0,0,452,118,1,0,0,0,453,454,
        5,44,0,0,454,120,1,0,0,0,455,456,5,40,0,0,456,122,1,0,0,0,457,458,
        5,41,0,0,458,124,1,0,0,0,459,460,5,91,0,0,460,126,1,0,0,0,461,462,
        5,93,0,0,462,128,1,0,0,0,463,464,5,123,0,0,464,130,1,0,0,0,465,466,
        5,125,0,0,466,132,1,0,0,0,467,468,5,46,0,0,468,469,5,46,0,0,469,
        470,5,46,0,0,470,134,1,0,0,0,471,473,7,0,0,0,472,471,1,0,0,0,473,
        474,1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,136,1,0,0,0,476,
        478,7,0,0,0,477,476,1,0,0,0,478,479,1,0,0,0,479,477,1,0,0,0,479,
        480,1,0,0,0,480,481,1,0,0,0,481,483,5,46,0,0,482,484,7,0,0,0,483,
        482,1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,
        138,1,0,0,0,487,491,5,34,0,0,488,490,8,1,0,0,489,488,1,0,0,0,490,
        493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,1,0,0,0,493,
        491,1,0,0,0,494,495,5,34,0,0,495,140,1,0,0,0,496,497,5,116,0,0,497,
        498,5,114,0,0,498,499,5,117,0,0,499,506,5,101,0,0,500,501,5,102,
        0,0,501,502,5,97,0,0,502,503,5,108,0,0,503,504,5,115,0,0,504,506,
        5,101,0,0,505,496,1,0,0,0,505,500,1,0,0,0,506,142,1,0,0,0,507,511,
        7,2,0,0,508,510,7,3,0,0,509,508,1,0,0,0,510,513,1,0,0,0,511,509,
        1,0,0,0,511,512,1,0,0,0,512,144,1,0,0,0,513,511,1,0,0,0,514,515,
        5,47,0,0,515,516,5,47,0,0,516,520,1,0,0,0,517,519,8,4,0,0,518,517,
        1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,1,0,0,0,521,523,
        1,0,0,0,522,520,1,0,0,0,523,524,6,72,0,0,524,146,1,0,0,0,525,527,
        7,5,0,0,526,525,1,0,0,0,527,528,1,0,0,0,528,526,1,0,0,0,528,529,
        1,0,0,0,529,530,1,0,0,0,530,531,6,73,0,0,531,148,1,0,0,0,532,534,
        7,0,0,0,533,532,1,0,0,0,534,535,1,0,0,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,537,1,0,0,0,537,541,7,6,0,0,538,540,7,3,0,0,539,538,
        1,0,0,0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,
        1,0,0,0,543,541,1,0,0,0,544,545,6,74,0,0,545,150,1,0,0,0,11,0,474,
        479,485,491,505,511,520,528,535,541,1,6,0,0
    ]

class BoardGameLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    GAME = 1
    DEFINE = 2
    BOARD = 3
    PLAYERS = 4
    CONDITIONS = 5
    TIMER = 6
    SCORE = 7
    DICE = 8
    RULES = 9
    PIECES = 10
    OBSTACLES = 11
    BOOSTERS = 12
    PLAYER = 13
    COLOR = 14
    AT = 15
    ORDER = 16
    CONDITION = 17
    RULE = 18
    PIECE = 19
    COUNT = 20
    ACTION = 21
    SETUP = 22
    OBSTACLE = 23
    BOOSTER = 24
    START = 25
    END = 26
    MOVE = 27
    TO = 28
    TURN = 29
    ROW = 30
    COLUMN = 31
    ALL = 32
    ANY = 33
    NONE = 34
    IF = 35
    ELSE = 36
    FOR = 37
    WHILE = 38
    INPUT = 39
    PRINT = 40
    RETURN = 41
    IN = 42
    BREAK = 43
    ERROR = 44
    AND_OPT = 45
    OR_OPT = 46
    NOT_OPT = 47
    EQUAL_OPT = 48
    ASSIGN_OPT = 49
    LESS_THAN_OPT = 50
    LESS_EQUAL_OPT = 51
    GREATER_THAN_OPT = 52
    GREATER_EQUAL_OPT = 53
    ADD_OPT = 54
    SUB_OPT = 55
    MUL_OPT = 56
    DIV_OPT = 57
    COLON = 58
    DOT = 59
    COMMA = 60
    OPEN_PAR = 61
    CLOSE_PAR = 62
    OPEN_BRACKET = 63
    CLOSE_BRACKET = 64
    OPEN_BRACE = 65
    CLOSE_BRACE = 66
    ELIPSIS = 67
    INT_LITERAL = 68
    FLOAT_LITERAL = 69
    STRING_LITERAL = 70
    BOOLEAN_LITERAL = 71
    IDENTIFIER = 72
    COMMENT = 73
    WS = 74
    INVALID_IDENTIFIER = 75

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'GAME'", "'DEFINE'", "'BOARD'", "'PLAYERS'", "'CONDITIONS'", 
            "'TIMER'", "'SCORE'", "'DICE'", "'RULES'", "'PIECES'", "'OBSTACLES'", 
            "'BOOSTERS'", "'PLAYER'", "'COLOR'", "'AT'", "'ORDER'", "'CONDITION'", 
            "'RULE'", "'PIECE'", "'COUNT'", "'ACTION'", "'SETUP'", "'OBSTACLE'", 
            "'BOOSTER'", "'START'", "'END'", "'MOVE'", "'TO'", "'TURN'", 
            "'ROW'", "'COLUMN'", "'ALL'", "'ANY'", "'NONE'", "'IF'", "'ELSE'", 
            "'FOR'", "'WHILE'", "'INPUT'", "'PRINT'", "'RETURN'", "'IN'", 
            "'BREAK'", "'ERROR'", "'AND'", "'OR'", "'NOT'", "'=='", "'='", 
            "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "':'", 
            "'.'", "','", "'('", "')'", "'['", "']'", "'{'", "'}'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "GAME", "DEFINE", "BOARD", "PLAYERS", "CONDITIONS", "TIMER", 
            "SCORE", "DICE", "RULES", "PIECES", "OBSTACLES", "BOOSTERS", 
            "PLAYER", "COLOR", "AT", "ORDER", "CONDITION", "RULE", "PIECE", 
            "COUNT", "ACTION", "SETUP", "OBSTACLE", "BOOSTER", "START", 
            "END", "MOVE", "TO", "TURN", "ROW", "COLUMN", "ALL", "ANY", 
            "NONE", "IF", "ELSE", "FOR", "WHILE", "INPUT", "PRINT", "RETURN", 
            "IN", "BREAK", "ERROR", "AND_OPT", "OR_OPT", "NOT_OPT", "EQUAL_OPT", 
            "ASSIGN_OPT", "LESS_THAN_OPT", "LESS_EQUAL_OPT", "GREATER_THAN_OPT", 
            "GREATER_EQUAL_OPT", "ADD_OPT", "SUB_OPT", "MUL_OPT", "DIV_OPT", 
            "COLON", "DOT", "COMMA", "OPEN_PAR", "CLOSE_PAR", "OPEN_BRACKET", 
            "CLOSE_BRACKET", "OPEN_BRACE", "CLOSE_BRACE", "ELIPSIS", "INT_LITERAL", 
            "FLOAT_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", "IDENTIFIER", 
            "COMMENT", "WS", "INVALID_IDENTIFIER" ]

    ruleNames = [ "GAME", "DEFINE", "BOARD", "PLAYERS", "CONDITIONS", "TIMER", 
                  "SCORE", "DICE", "RULES", "PIECES", "OBSTACLES", "BOOSTERS", 
                  "PLAYER", "COLOR", "AT", "ORDER", "CONDITION", "RULE", 
                  "PIECE", "COUNT", "ACTION", "SETUP", "OBSTACLE", "BOOSTER", 
                  "START", "END", "MOVE", "TO", "TURN", "ROW", "COLUMN", 
                  "ALL", "ANY", "NONE", "IF", "ELSE", "FOR", "WHILE", "INPUT", 
                  "PRINT", "RETURN", "IN", "BREAK", "ERROR", "AND_OPT", 
                  "OR_OPT", "NOT_OPT", "EQUAL_OPT", "ASSIGN_OPT", "LESS_THAN_OPT", 
                  "LESS_EQUAL_OPT", "GREATER_THAN_OPT", "GREATER_EQUAL_OPT", 
                  "ADD_OPT", "SUB_OPT", "MUL_OPT", "DIV_OPT", "COLON", "DOT", 
                  "COMMA", "OPEN_PAR", "CLOSE_PAR", "OPEN_BRACKET", "CLOSE_BRACKET", 
                  "OPEN_BRACE", "CLOSE_BRACE", "ELIPSIS", "INT_LITERAL", 
                  "FLOAT_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "IDENTIFIER", "COMMENT", "WS", "INVALID_IDENTIFIER" ]

    grammarFileName = "BoardGameLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



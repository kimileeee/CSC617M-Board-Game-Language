GAME checkers

DEFINE checkers:
     BOARD (8, 8, "checker")
     PLAYERS (me, you) 
     PIECES (regular, king)
     OBSTACLES (NONE)
     BOOSTERS (NONE)
     CONDITIONS (ANY)
     RULES (ALL)
     TIMER(1800)
END

DEFINE checkers.PLAYERS:
     PLAYER me COLOR COLOR.white AT BOARD.ROW.1
     PLAYER you COLOR COLOR.black AT BOARD.ROW.8 
     ORDER ([me, you])
END

DEFINE checkers.CONDITIONS:
     CONDITION (ANY PLAYERS PIECES.COUNT == 0)
END

DEFINE checkers.RULES :
     RULE promote_rule_white (IF ANY regular AT BOARD.ROW.8 AND regular.color == white 
                              THEN regular CONVERT king 
                              END)
     RULE promote_rule_black (IF ANY regular AT BOARD.ROW.1 AND regular.color == black 
                              THEN regular CONVERT king 
                              END)
END

DEFINE checkers.PIECES:
     PIECE regular COUNT 12
     PIECE king COUNT 0

     PIECE regular ACTION (name = move, direction = diagonal, min_count = 1, max_count = 1, skip = True, across = False, backtrack = False, consume = False)
     PIECE regular ACTION (name = consume, direction = diagonal, min_count = 1, max_count = 1, skip = True, across = False, backtrack = False, consume = True)

     PIECE king ACTION (name = move, direction = diagonal, min_count = 1, skip = True, across = True, backtrack = True, consume = False)
     PIECE king ACTION (name = consume, direction = diagonal, min_count = 1, skip = True, across = True, backtrack = True, consume = True)
END

DEFINE checkers.BOARD:
     PLAYER me PIECE regular SETUP (BOARD.A1, BOARD.A3, BOARD.A5)
     PLAYER you PIECE king SETUP (BOARD.B1, BOARD.B3)
END

START:

     eval_output = EVALUATE(1 + 2)
     PRINT(eval_output)

     eval_output = EVALUATE(3 + 5 - 2)
     eval_output = EVALUATE(10 * 2 / 5)
     eval_output = EVALUATE(10 * 2 / 3)
     // eval_output = EVALUATE(10 * 2 / 0)
     eval_output = EVALUATE(2 ^ 3 ^ 2)
     eval_output = EVALUATE((2 ^ 3) ^ 2)
     eval_output = EVALUATE(3 + 5 * 2 ^ 2)
     eval_output = EVALUATE((3 + 5) * 2)
     eval_output = EVALUATE(10 >= 10)
     eval_output = EVALUATE(5 == 5 AND 5 == 3)
     eval_output = EVALUATE(5 > 10 OR 8 < 10)
     eval_output = EVALUATE(10 > 11 AND 7 - 7)
     eval_output = EVALUATE(3 > 5)
     eval_output = EVALUATE(NOT 3 > 5)
     eval_output = EVALUATE(NOT 10 > 11 AND 7 - 7)
     eval_output = EVALUATE((NOT 10 > 11) AND 7 - 7)
     eval_output = EVALUATE(NOT (10 > 11 AND 7 - 7))
     eval_output = EVALUATE((NOT 10 > 11 AND 7) - 7.0)
     eval_output = EVALUATE(eval_output + 1)
     // eval_output = EVALUATE(me.king + 1)

     TURN white
     MOVE regular_1 TO BOARD.E4
     // player_move = INPUT("Enter move: ")
     PRINT("Moved regular_1 to E4")
     // PRINT(player_move)

     TURN black
     MOVE regular_1 TO BOARD.F7
     // player_move = INPUT("Enter move: ")
     PRINT("Moved regular_1 to F7")
     // PRINT(player_move)
END